name: CI/CD to GCP VM via Artifact Registry

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Build, Push & Deploy Flask Blog
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    env:
      PROJECT_ID: blog-flask-oneit
      REGION: us-east1
      REPO_NAME: blog-repo
      IMAGE_NAME: flask-blog
      # Esta es la etiqueta de imagen correcta (el SHA del commit)
      IMAGE_TAG: ${{ github.sha }} 
      REGISTRY: us-east1-docker.pkg.dev/blog-flask-oneit/blog-repo

    steps:
      # 1Ô∏è‚É£ Checkout del c√≥digo fuente
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Autenticaci√≥n con GCP v√≠a OIDC
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      # 3Ô∏è‚É£ Configurar gcloud y Docker (para el RUNNER)
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: gcloud, docker-credential-gcr

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # 4Ô∏è‚É£ Construir imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # 5Ô∏è‚É£ Subir imagen a Artifact Registry
      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # 6Ô∏è‚É£ Preparar conexi√≥n SSH a la VM
      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      # 7Ô∏è‚É£ Desplegar en la VM
      - name: Deploy to GCP VM
        env:
          VM_USER: gcpuser
          VM_IP: ${{ secrets.VM_IP }}
          # Las variables del 'env' global del job ya est√°n disponibles aqu√≠
          # (PROJECT_ID, REGION, IMAGE_TAG, REGISTRY, IMAGE_NAME)
        run: |
          ssh -i ~/.ssh/id_rsa $VM_USER@$VM_IP << EOF
            # Habilita 'exit on error'
            set -e

            # Autentica la VM con Artifact Registry
            echo "Authenticating VM Docker to Artifact Registry..."
            gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

            export REPO_DIR="/home/${VM_USER}/oneit-blog"
            export REPO_URL="https://github.com/regperez/oneit-blog.git"
            
            # L√ìGICA DE GIT CORREGIDA:
            if [ -d "\$REPO_DIR" ]; then
              echo "Repo exists. Pulling latest changes..."
              cd \$REPO_DIR

              # üö© CORRECCI√ìN CR√çTICA: Descartar cambios locales antes de pull
              # Esto elimina la versi√≥n anterior modificada por 'sed'
              git reset --hard
              git clean -f -d
              
              git checkout main 
              git pull origin main
            else
              echo "Repo not found. Cloning..."
              git clone \$REPO_URL \$REPO_DIR
              cd \$REPO_DIR
            fi

            # Ahora se ejecuta el sed, modificando la versi√≥n limpia del archivo.
            # Actualiza 'docker-compose.yml' con la ETIQUETA DEL COMMIT (SHA)
            echo "Setting image tag to: ${{ env.IMAGE_TAG }}"
            
            # Esta expresi√≥n 'sed' buscar√° la l√≠nea que empieza con 'image: ...' 
            # y reemplazar√° *toda* la l√≠nea con la nueva URL de imagen + etiqueta SHA.
            sed -i "s|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|" docker-compose.yml

            # 5. Desplegar
            echo "Pulling latest image and restarting containers..."
            docker compose pull
            docker compose up -d --remove-orphans
          EOF

