name: CI/CD to GCP VM via Artifact Registry

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Build, Push & Deploy Flask Blog
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    env:
      PROJECT_ID: blog-flask-oneit
      REGION: us-east1
      REPO_NAME: blog-repo
      IMAGE_NAME: flask-blog
      IMAGE_TAG: ${{ github.sha }}
      REGISTRY: us-east1-docker.pkg.dev/blog-flask-oneit/blog-repo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: gcloud, docker-credential-gcr

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Encode SA Key to Base64
        run: |
          CLEAN_JSON=$(echo '${{ secrets.GCP_SA_KEY_JSON }}' | tr -d '\n\r')
          ENCODED_KEY=$(echo "${CLEAN_JSON}" | base64 -w 0)
          echo "ENCODED_KEY=${ENCODED_KEY}" >> $GITHUB_ENV

      - name: Deploy to GCP VM
        run: |
          ssh -i ~/.ssh/id_rsa gcpuser@${{ secrets.VM_IP }} \
            "ENCODED_SA_KEY='${{ env.ENCODED_KEY }}' \
             SA_EMAIL='${{ secrets.GCP_SA_EMAIL }}' \
             IMAGE_TAG='${{ env.IMAGE_TAG }}' \
             REGISTRY='${{ env.REGISTRY }}' \
             IMAGE_NAME='${{ env.IMAGE_NAME }}' \
             REGION='${{ env.REGION }}' \
             VM_USER='gcpuser' \
             bash -s" << 'ENDSSH'
            set -e
            echo "Activating service account for Docker pull..."
            
            echo "$ENCODED_SA_KEY" | base64 -d > /tmp/key.json
            gcloud auth activate-service-account "$SA_EMAIL" --key-file=/tmp/key.json
            gcloud auth configure-docker $REGION-docker.pkg.dev --quiet
            rm /tmp/key.json
            
            export REPO_DIR="/home/$VM_USER/oneit-blog"
            export REPO_URL="https://github.com/regperez/oneit-blog.git"
            
            if [ -d "$REPO_DIR" ]; then
              echo "Repo exists. Pulling latest changes..."
              cd $REPO_DIR
              git reset --hard
              git clean -f -d
              git checkout main 
              git pull origin main
            else
              echo "Repo not found. Cloning..."
              git clone $REPO_URL $REPO_DIR
              cd $REPO_DIR
            fi

            echo "Setting image tag to: $IMAGE_TAG"
            sed -i "s|image: $REGISTRY/$IMAGE_NAME:.*|image: $REGISTRY/$IMAGE_NAME:$IMAGE_TAG|" docker-compose.yml

            echo "Pulling latest image and restarting containers..."
            docker compose pull
            docker compose up -d --remove-orphans
          ENDSSH
